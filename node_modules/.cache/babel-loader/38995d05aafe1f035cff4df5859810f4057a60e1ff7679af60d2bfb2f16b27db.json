{"ast":null,"code":"// Define the type for the input parameters\n\n// Define the type for the annual data output\n\n// Function to calculate investment results\nexport function calculateInvestmentResults({\n  initialInvestment,\n  annualInvestment,\n  expectedReturn,\n  duration\n}) {\n  const annualData = [];\n  let investmentValue = initialInvestment;\n  for (let i = 0; i < duration; i++) {\n    const interestEarnedInYear = investmentValue * (expectedReturn / 100);\n    investmentValue += interestEarnedInYear + annualInvestment;\n    annualData.push({\n      year: i + 1,\n      // year identifier\n      interest: interestEarnedInYear,\n      // the amount of interest earned in this year\n      valueEndOfYear: investmentValue,\n      // investment value at the end of the year\n      annualInvestment: annualInvestment // investment added in this year\n    });\n  }\n  return annualData;\n}\n\n// Currency formatter using the browser-provided Intl API\nexport const formatter = new Intl.NumberFormat('en-US', {\n  style: 'currency',\n  currency: 'USD',\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 0\n});","map":{"version":3,"names":["calculateInvestmentResults","initialInvestment","annualInvestment","expectedReturn","duration","annualData","investmentValue","i","interestEarnedInYear","push","year","interest","valueEndOfYear","formatter","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits"],"sources":["/Users/JOB1BG/Downloads/Investment-Calculator-App/investment-calculator-app/src/util/investment.ts"],"sourcesContent":["// Define the type for the input parameters\ninterface InvestmentInput {\n  initialInvestment: number; // Initial investment amount\n  annualInvestment: number; // Amount invested every year\n  expectedReturn: number; // Expected annual rate of return (percentage)\n  duration: number; // Investment duration in years\n}\n\n// Define the type for the annual data output\ninterface AnnualData {\n  year: number; // Year identifier\n  interest: number; // Interest earned during the year\n  valueEndOfYear: number; // Investment value at the end of the year\n  annualInvestment: number; // Investment added during the year\n}\n\n// Function to calculate investment results\nexport function calculateInvestmentResults({\n  initialInvestment,\n  annualInvestment,\n  expectedReturn,\n  duration,\n}: InvestmentInput): AnnualData[] {\n  const annualData: AnnualData[] = [];\n  let investmentValue = initialInvestment;\n\n  for (let i = 0; i < duration; i++) {\n    const interestEarnedInYear = investmentValue * (expectedReturn / 100);\n    investmentValue += interestEarnedInYear + annualInvestment;\n\n    annualData.push({\n      year: i + 1, // year identifier\n      interest: interestEarnedInYear, // the amount of interest earned in this year\n      valueEndOfYear: investmentValue, // investment value at the end of the year\n      annualInvestment: annualInvestment, // investment added in this year\n    });\n  }\n\n  return annualData;\n}\n\n// Currency formatter using the browser-provided Intl API\nexport const formatter = new Intl.NumberFormat('en-US', {\n  style: 'currency',\n  currency: 'USD',\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 0,\n});\n\n"],"mappings":"AAAA;;AAQA;;AAQA;AACA,OAAO,SAASA,0BAA0BA,CAAC;EACzCC,iBAAiB;EACjBC,gBAAgB;EAChBC,cAAc;EACdC;AACe,CAAC,EAAgB;EAChC,MAAMC,UAAwB,GAAG,EAAE;EACnC,IAAIC,eAAe,GAAGL,iBAAiB;EAEvC,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,QAAQ,EAAEG,CAAC,EAAE,EAAE;IACjC,MAAMC,oBAAoB,GAAGF,eAAe,IAAIH,cAAc,GAAG,GAAG,CAAC;IACrEG,eAAe,IAAIE,oBAAoB,GAAGN,gBAAgB;IAE1DG,UAAU,CAACI,IAAI,CAAC;MACdC,IAAI,EAAEH,CAAC,GAAG,CAAC;MAAE;MACbI,QAAQ,EAAEH,oBAAoB;MAAE;MAChCI,cAAc,EAAEN,eAAe;MAAE;MACjCJ,gBAAgB,EAAEA,gBAAgB,CAAE;IACtC,CAAC,CAAC;EACJ;EAEA,OAAOG,UAAU;AACnB;;AAEA;AACA,OAAO,MAAMQ,SAAS,GAAG,IAAIC,IAAI,CAACC,YAAY,CAAC,OAAO,EAAE;EACtDC,KAAK,EAAE,UAAU;EACjBC,QAAQ,EAAE,KAAK;EACfC,qBAAqB,EAAE,CAAC;EACxBC,qBAAqB,EAAE;AACzB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}